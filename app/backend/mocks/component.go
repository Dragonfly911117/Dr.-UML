// notest
// Code generated by MockGen. DO NOT EDIT.
// Source: .\backend\component\component.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	utils "Dr.uml/backend/utils"
	duerror "Dr.uml/backend/utils/duerror"
	gomock "github.com/golang/mock/gomock"
)

// MockComponent is a mock of Component interface.
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
}

// MockComponentMockRecorder is the mock recorder for MockComponent.
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance.
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// Cover mocks base method.
func (m *MockComponent) Cover(p utils.Point) (bool, duerror.DUError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cover", p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(duerror.DUError)
	return ret0, ret1
}

// Cover indicates an expected call of Cover.
func (mr *MockComponentMockRecorder) Cover(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cover", reflect.TypeOf((*MockComponent)(nil).Cover), p)
}

// GetDrawData mocks base method.
func (m *MockComponent) GetDrawData() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrawData")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetDrawData indicates an expected call of GetDrawData.
func (mr *MockComponentMockRecorder) GetDrawData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrawData", reflect.TypeOf((*MockComponent)(nil).GetDrawData))
}

// GetIsSelected mocks base method.
func (m *MockComponent) GetIsSelected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsSelected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsSelected indicates an expected call of GetIsSelected.
func (mr *MockComponentMockRecorder) GetIsSelected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsSelected", reflect.TypeOf((*MockComponent)(nil).GetIsSelected))
}

// GetLayer mocks base method.
func (m *MockComponent) GetLayer() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayer")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetLayer indicates an expected call of GetLayer.
func (mr *MockComponentMockRecorder) GetLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayer", reflect.TypeOf((*MockComponent)(nil).GetLayer))
}

// RegisterUpdateParentDraw mocks base method.
func (m *MockComponent) RegisterUpdateParentDraw(update func() duerror.DUError) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUpdateParentDraw", update)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// RegisterUpdateParentDraw indicates an expected call of RegisterUpdateParentDraw.
func (mr *MockComponentMockRecorder) RegisterUpdateParentDraw(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdateParentDraw", reflect.TypeOf((*MockComponent)(nil).RegisterUpdateParentDraw), update)
}

// SetIsSelected mocks base method.
func (m *MockComponent) SetIsSelected(isSelected bool) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsSelected", isSelected)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetIsSelected indicates an expected call of SetIsSelected.
func (mr *MockComponentMockRecorder) SetIsSelected(isSelected interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsSelected", reflect.TypeOf((*MockComponent)(nil).SetIsSelected), isSelected)
}

// SetLayer mocks base method.
func (m *MockComponent) SetLayer(layer int) duerror.DUError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLayer", layer)
	ret0, _ := ret[0].(duerror.DUError)
	return ret0
}

// SetLayer indicates an expected call of SetLayer.
func (mr *MockComponentMockRecorder) SetLayer(layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLayer", reflect.TypeOf((*MockComponent)(nil).SetLayer), layer)
}
